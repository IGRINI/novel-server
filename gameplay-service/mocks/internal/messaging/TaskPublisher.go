// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	messaging "novel-server/shared/messaging"

	mock "github.com/stretchr/testify/mock"
)

// TaskPublisher is an autogenerated mock type for the TaskPublisher type
type TaskPublisher struct {
	mock.Mock
}

// PublishGenerationTask provides a mock function with given fields: ctx, payload
func (_m *TaskPublisher) PublishGenerationTask(ctx context.Context, payload messaging.GenerationTaskPayload) error {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for PublishGenerationTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, messaging.GenerationTaskPayload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskPublisher creates a new instance of TaskPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskPublisher {
	mock := &TaskPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
