// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "novel-server/gameplay-service/internal/models"

	mock "github.com/stretchr/testify/mock"

	sharedmodels "novel-server/shared/models"

	uuid "github.com/google/uuid"
)

// GameplayService is an autogenerated mock type for the GameplayService type
type GameplayService struct {
	mock.Mock
}

// GenerateInitialStory provides a mock function with given fields: ctx, userID, initialPrompt
func (_m *GameplayService) GenerateInitialStory(ctx context.Context, userID uint64, initialPrompt string) (*models.StoryConfig, error) {
	ret := _m.Called(ctx, userID, initialPrompt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInitialStory")
	}

	var r0 *models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) (*models.StoryConfig, error)); ok {
		return rf(ctx, userID, initialPrompt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) *models.StoryConfig); ok {
		r0 = rf(ctx, userID, initialPrompt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, userID, initialPrompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoryConfig provides a mock function with given fields: ctx, id, userID
func (_m *GameplayService) GetStoryConfig(ctx context.Context, id uuid.UUID, userID uint64) (*models.StoryConfig, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetStoryConfig")
	}

	var r0 *models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) (*models.StoryConfig, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) *models.StoryConfig); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint64) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMyDrafts provides a mock function with given fields: ctx, userID, limit, cursor
func (_m *GameplayService) ListMyDrafts(ctx context.Context, userID uint64, limit int, cursor string) ([]models.StoryConfig, string, error) {
	ret := _m.Called(ctx, userID, limit, cursor)

	if len(ret) == 0 {
		panic("no return value specified for ListMyDrafts")
	}

	var r0 []models.StoryConfig
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int, string) ([]models.StoryConfig, string, error)); ok {
		return rf(ctx, userID, limit, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int, string) []models.StoryConfig); ok {
		r0 = rf(ctx, userID, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int, string) string); ok {
		r1 = rf(ctx, userID, limit, cursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, int, string) error); ok {
		r2 = rf(ctx, userID, limit, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMyPublishedStories provides a mock function with given fields: ctx, userID, limit, offset
func (_m *GameplayService) ListMyPublishedStories(ctx context.Context, userID uint64, limit int, offset int) ([]*sharedmodels.PublishedStory, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListMyPublishedStories")
	}

	var r0 []*sharedmodels.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int, int) ([]*sharedmodels.PublishedStory, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, int, int) []*sharedmodels.PublishedStory); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sharedmodels.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublicStories provides a mock function with given fields: ctx, limit, offset
func (_m *GameplayService) ListPublicStories(ctx context.Context, limit int, offset int) ([]*sharedmodels.PublishedStory, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicStories")
	}

	var r0 []*sharedmodels.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*sharedmodels.PublishedStory, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*sharedmodels.PublishedStory); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sharedmodels.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishDraft provides a mock function with given fields: ctx, draftID, userID
func (_m *GameplayService) PublishDraft(ctx context.Context, draftID uuid.UUID, userID uint64) (uuid.UUID, error) {
	ret := _m.Called(ctx, draftID, userID)

	if len(ret) == 0 {
		panic("no return value specified for PublishDraft")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) (uuid.UUID, error)); ok {
		return rf(ctx, draftID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64) uuid.UUID); ok {
		r0 = rf(ctx, draftID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint64) error); ok {
		r1 = rf(ctx, draftID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviseDraft provides a mock function with given fields: ctx, id, userID, revisionPrompt
func (_m *GameplayService) ReviseDraft(ctx context.Context, id uuid.UUID, userID uint64, revisionPrompt string) error {
	ret := _m.Called(ctx, id, userID, revisionPrompt)

	if len(ret) == 0 {
		panic("no return value specified for ReviseDraft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64, string) error); ok {
		r0 = rf(ctx, id, userID, revisionPrompt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGameplayService creates a new instance of GameplayService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameplayService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameplayService {
	mock := &GameplayService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
