x-environment-defaults: &env-vars
  ENV: ${ENV:-development}
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DB_HOST: ${DB_HOST:-localhost}
  DB_PORT: ${DB_PORT:-5432}
  DB_USER: ${DB_USER:-postgres}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_NAME:-novel_db}
  DB_SSL_MODE: ${DB_SSL_MODE:-disable}
  REDIS_ADDR: ${REDIS_ADDR:-localhost:6379}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-}
  REDIS_DB: ${REDIS_DB:-0}
  JWT_SECRET: ${JWT_SECRET}
  PASSWORD_SALT: ${PASSWORD_SALT}
  JWT_ACCESS_TOKEN_TTL: ${JWT_ACCESS_TOKEN_TTL:-15m}
  JWT_REFRESH_TOKEN_TTL: ${JWT_REFRESH_TOKEN_TTL:-168h}
  SERVICE_ID: ${SERVICE_ID:-default-service}
  INTER_SERVICE_SECRET: ${INTER_SERVICE_SECRET}
  INTER_SERVICE_TTL: ${INTER_SERVICE_TTL:-5m}
  AI_API_KEY: ${AI_API_KEY}
  RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/}

services:
  # API Gateway (Traefik)
  api-gateway:
    image: traefik:v2.11 # Используем стабильную версию Traefik
    container_name: novel_api_gateway
    command:
      # Включаем Docker провайдер
      - "--providers.docker=true"
      # Не разрешаем Traefik обнаруживать контейнеры без явной метки traefik.enable=true
      - "--providers.docker.exposedbydefault=false"
      # Определяем точку входа 'web' на порту 8080 (для пользовательского трафика)
      - "--entrypoints.web.address=:8080"
      # Определяем точку входа 'traefik' (для API/Dashboard) на порту 8081
      - "--entrypoints.traefik.address=:8081"
      # Включаем API Traefik и Dashboard, указывая, что они должны использовать точку входа 'traefik'
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true" # В продакшене защитить!
      # Включаем логирование доступа
      - "--accesslog=true"
      # Указываем уровень логов Traefik
      - "--log.level=INFO" # Или DEBUG для отладки
    ports:
      # Публикуем порт 8080 (хост) -> 8080 (контейнер, entrypoint 'web')
      - "8080:8080"
      # Публикуем порт 8888 (хост) -> 8081 (контейнер, entrypoint 'traefik' для API/Dashboard)
      - "8888:8081"
    volumes:
      # Монтируем Docker сокет, чтобы Traefik мог слушать события Docker
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - novel_network
    # Можно добавить depends_on, если нужно дождаться старта других сервисов, но обычно Traefik сам справляется
    labels:
      # <<< УДАЛЯЕМ метки, связанные с custom-errors и catch-all-web >>>
      # - "traefik.http.middlewares.custom-errors.errors.status=404"
      # - "traefik.http.middlewares.custom-errors.errors.service=error-pages@docker"
      # - "traefik.http.middlewares.custom-errors.errors.query=/{status}.html"
      # - "traefik.http.routers.catch-all-web.rule=PathPrefix(`/`)" 
      # - "traefik.http.routers.catch-all-web.entrypoints=web"
      # - "traefik.http.routers.catch-all-web.priority=1"
      # - "traefik.http.routers.catch-all-web.middlewares=custom-errors@docker"
      
      # --- Определяем другие middleware (stripprefix) --- 
      - "traefik.http.middlewares.auth-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.gameplay-stripprefix.stripprefix.prefixes=/api/stories"
      - "traefik.http.middlewares.admin-stripprefix.stripprefix.prefixes=/admin"
      
      # Важно: нужна метка enable=true, чтобы Traefik вообще работал с Docker
      - "traefik.enable=true" 

  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: novel_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-novel_db}
    ports:
      # Порт публикуется только для локального доступа к БД, если нужно
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-novel_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Кэш Redis
  redis:
    image: redis:7-alpine
    container_name: novel_redis
    ports:
      # Порт публикуется только для локального доступа к Redis, если нужно
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Сервис миграций (запускается перед auth)
  migrate:
    build:
      context: .
      dockerfile: deploy/docker/migrate/Dockerfile
    container_name: novel_migrate
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-novel_db}?sslmode=${DB_SSL_MODE:-disable}",
      "up"
    ]

  # Сервис авторизации
  auth-service:
    build:
      context: .
      dockerfile: auth/Dockerfile
    container_name: novel_auth
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
         condition: service_completed_successfully
    environment:
      <<: *env-vars
      DB_HOST: postgres
      REDIS_ADDR: redis:6379
      SERVER_PORT: ${AUTH_SERVER_PORT:-8081}
      SERVICE_ID: auth-service
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Даем больше времени на первый старт
    ports: # <<< Раскомментируем обратно публикацию порта 8081
      - "${AUTH_SERVER_PORT:-8081}:8081"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-http.rule=PathPrefix(`/api/auth`)" 
      - "traefik.http.routers.auth-http.entrypoints=web" 
      - "traefik.http.services.auth-service.loadbalancer.server.port=${AUTH_SERVER_PORT:-8081}"
      - "traefik.http.routers.auth-http.middlewares=auth-stripprefix"

  # Сервис Геймплея (обработка запросов /api/stories)
  gameplay-service:
    build:
      context: .
      dockerfile: gameplay-service/Dockerfile
    container_name: novel_gameplay_service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
         condition: service_completed_successfully
    environment:
      <<: *env-vars # Наследуем общие переменные
      DB_HOST: postgres # Внутреннее имя хоста БД
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/ # URL для Docker
      SERVER_PORT: ${GAMEPLAY_SERVER_PORT:-8082} # Внутренний порт сервиса
      SERVICE_ID: gameplay-service
      # JWT_SECRET уже включен через *env-vars
    # ports: # Убираем публикацию порта наружу
    #   - "${GAMEPLAY_SERVER_PORT:-8082}:${GAMEPLAY_SERVER_PORT:-8082}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gameplay-http.rule=PathPrefix(`/api/stories`)" 
      - "traefik.http.routers.gameplay-http.entrypoints=web" 
      - "traefik.http.services.gameplay-service.loadbalancer.server.port=${GAMEPLAY_SERVER_PORT:-8082}"
      # <<< УБИРАЕМ custom-errors отсюда >>>
      - "traefik.http.routers.gameplay-http.middlewares=gameplay-stripprefix"

  # Сервис Админки
  admin-service:
    build:
      context: .
      dockerfile: admin-service/Dockerfile
    container_name: novel_admin_service
    ports:
      - "8084:8084" # Порт admin-service
    environment:
      - APP_ENV=development
      - PORT=8084
      - LOG_LEVEL=debug
      - AUTH_SERVICE_URL=http://host.docker.internal:8081 # <<< Возвращаем URL с host.docker.internal
      - CLIENT_TIMEOUT=10s
      - INTER_SERVICE_SECRET=${INTER_SERVICE_SECRET} # <<< Меняем на переменную окружения
      - SERVICE_ID=admin-service # Идентификатор сервиса
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      auth-service:
        condition: service_healthy # Запускаем только после healthcheck auth-service
    networks:
      - novel_network
    healthcheck: # <<< Возвращаем Healthcheck для admin-service
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8084/metrics"] # Проверяем доступность metrics
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Даем время на запуск
    volumes:
      - ./admin-service:/app/admin-service # Volume mounting for hot-reloading
      - ./shared:/app/shared # Mount shared directory
    labels:
      - "traefik.enable=true"

      # --- Роутер для страницы входа --- 
      - "traefik.http.routers.admin-login-http.rule=Path(`/login`)" # Точный путь /login
      - "traefik.http.routers.admin-login-http.entrypoints=web"
      - "traefik.http.services.admin-service.loadbalancer.server.port=${ADMIN_SERVER_PORT:-8084}"
      # <<< УБИРАЕМ custom-errors отсюда >>>
      # - "traefik.http.routers.admin-login-http.middlewares=custom-errors@docker"

      # --- Роутер для защищенных путей админки --- 
      - "traefik.http.routers.admin-protected-http.rule=PathPrefix(`/admin`)" # Пути, начинающиеся с /admin
      - "traefik.http.routers.admin-protected-http.entrypoints=web"
      # Сервис тот же, что и для логина
      # - "traefik.http.services.admin-service.loadbalancer.server.port=${ADMIN_SERVER_PORT:-8084}" # Можно не повторять
      # <<< УБИРАЕМ custom-errors отсюда >>>
      - "traefik.http.routers.admin-protected-http.middlewares=admin-stripprefix"

  # Сервис RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: novel_rabbitmq
    ports:
      # Порты для доступа извне (если нужно) и для Management UI
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGE_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # Сервис Story Generator
  story-generator:
    build:
      context: .
      dockerfile: story-generator/Dockerfile
    container_name: novel_story_generator
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./promts:/app/promts
    environment:
      <<: *env-vars
      DB_HOST: postgres
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/
      PROMPTS_DIR: /app/promts
      SERVICE_ID: story-generator-service
    # Этот сервис не обрабатывает внешние HTTP запросы, поэтому не нуждается в метках Traefik

  # Сервис WebSocket уведомлений
  websocket-service:
    build:
      context: .
      dockerfile: websocket-service/Dockerfile
    container_name: novel_websocket_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      # auth сервис не обязателен для *запуска* websocket-service,
      # но нужен для валидации токенов при установке соединения.
      # depends_on auth не требуется, если auth стартует быстро.
    environment:
      <<: *env-vars # Наследуем общие переменные
      PORT: ${WEBSOCKET_SERVER_PORT:-8083} # Внутренний порт сервиса
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/ # URL для Docker
      SERVICE_ID: websocket-service
      # JWT_SECRET уже включен через *env-vars
    # ports: # Убираем публикацию порта наружу
    #   - "${WEBSOCKET_SERVER_PORT:-8083}:${WEBSOCKET_SERVER_PORT:-8083}"
    labels:
      # Включаем Traefik для этого сервиса
      - "traefik.enable=true"
      # Определяем роутер для WebSocket запросов
      # Используем Path(`/ws`) для точного совпадения пути
      - "traefik.http.routers.websocket-ws.rule=Path(`/ws`)"
      - "traefik.http.routers.websocket-ws.entrypoints=web" # Используем точку входа 'web' (порт 8080)
      # Указываем внутренний порт сервиса
      - "traefik.http.services.websocket-service.loadbalancer.server.port=${WEBSOCKET_SERVER_PORT:-8083}"
      # Для WebSocket не нужен stripprefix, т.к. сервис ожидает запрос на /ws

# Новые сервисы для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: novel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Конфигурация Prometheus
      - prometheus_data:/prometheus # Хранилище данных Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - novel_network
    depends_on:
      - admin-service # Зависит от сервисов, которые мониторит
      - auth-service

  grafana:
    image: grafana/grafana:latest
    container_name: novel_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana # Хранилище данных Grafana
      # Опционально: можно заранее создать provisioning для datasources и dashboards
      # - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin # Учетные данные по умолчанию
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_DISABLE_LOGIN_FORM=false # Оставляем форму входа
      # GF_INSTALL_PLUGINS: можно указать плагины для установки
    networks:
      - novel_network
    depends_on:
      - prometheus # <<< Формат списка для grafana

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data: {} # Volume для данных Prometheus
  grafana_data: {} # Volume для данных Grafana
  # Добавляем том для данных Traefik (если нужно хранить SSL сертификаты и т.д.)
  # traefik_data:

# Определяем сеть, чтобы сервисы могли общаться друг с другом по именам
networks:
  novel_network:
    driver: bridge
