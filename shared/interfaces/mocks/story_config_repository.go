// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"

	pgx "github.com/jackc/pgx/v5"

	time "time"

	uuid "github.com/google/uuid"
)

// StoryConfigRepository is an autogenerated mock type for the StoryConfigRepository type
type StoryConfigRepository struct {
	mock.Mock
}

// CountActiveGenerations provides a mock function with given fields: ctx, userID
func (_m *StoryConfigRepository) CountActiveGenerations(ctx context.Context, userID uuid.UUID) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountActiveGenerations")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, config
func (_m *StoryConfigRepository) Create(ctx context.Context, config *models.StoryConfig) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StoryConfig) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, userID
func (_m *StoryConfigRepository) Delete(ctx context.Context, id uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTx provides a mock function with given fields: ctx, tx, id, userID
func (_m *StoryConfigRepository) DeleteTx(ctx context.Context, tx pgx.Tx, id uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, tx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, tx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindGeneratingConfigs provides a mock function with given fields: ctx
func (_m *StoryConfigRepository) FindGeneratingConfigs(ctx context.Context) ([]*models.StoryConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindGeneratingConfigs")
	}

	var r0 []*models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.StoryConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.StoryConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindGeneratingOlderThan provides a mock function with given fields: ctx, threshold
func (_m *StoryConfigRepository) FindGeneratingOlderThan(ctx context.Context, threshold time.Time) ([]models.StoryConfig, error) {
	ret := _m.Called(ctx, threshold)

	if len(ret) == 0 {
		panic("no return value specified for FindGeneratingOlderThan")
	}

	var r0 []models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]models.StoryConfig, error)); ok {
		return rf(ctx, threshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.StoryConfig); ok {
		r0 = rf(ctx, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id, userID
func (_m *StoryConfigRepository) GetByID(ctx context.Context, id uuid.UUID, userID uuid.UUID) (*models.StoryConfig, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.StoryConfig, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.StoryConfig); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDInternal provides a mock function with given fields: ctx, id
func (_m *StoryConfigRepository) GetByIDInternal(ctx context.Context, id uuid.UUID) (*models.StoryConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDInternal")
	}

	var r0 *models.StoryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.StoryConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.StoryConfig); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByUserID provides a mock function with given fields: ctx, userID, cursor, limit
func (_m *StoryConfigRepository) ListByUserID(ctx context.Context, userID uuid.UUID, cursor string, limit int) ([]models.StoryConfig, string, error) {
	ret := _m.Called(ctx, userID, cursor, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []models.StoryConfig
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int) ([]models.StoryConfig, string, error)); ok {
		return rf(ctx, userID, cursor, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int) []models.StoryConfig); ok {
		r0 = rf(ctx, userID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int) string); ok {
		r1 = rf(ctx, userID, cursor, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string, int) error); ok {
		r2 = rf(ctx, userID, cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, config
func (_m *StoryConfigRepository) Update(ctx context.Context, config *models.StoryConfig) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.StoryConfig) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfigAndInput provides a mock function with given fields: ctx, id, config, userInput
func (_m *StoryConfigRepository) UpdateConfigAndInput(ctx context.Context, id uuid.UUID, config []byte, userInput []byte) error {
	ret := _m.Called(ctx, id, config, userInput)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigAndInput")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []byte, []byte) error); ok {
		r0 = rf(ctx, id, config, userInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfigAndInputAndStatus provides a mock function with given fields: ctx, id, configJSON, userInputJSON, status
func (_m *StoryConfigRepository) UpdateConfigAndInputAndStatus(ctx context.Context, id uuid.UUID, configJSON json.RawMessage, userInputJSON json.RawMessage, status models.StoryStatus) error {
	ret := _m.Called(ctx, id, configJSON, userInputJSON, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigAndInputAndStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, json.RawMessage, json.RawMessage, models.StoryStatus) error); ok {
		r0 = rf(ctx, id, configJSON, userInputJSON, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusAndConfig provides a mock function with given fields: ctx, id, status, config, title, description
func (_m *StoryConfigRepository) UpdateStatusAndConfig(ctx context.Context, id uuid.UUID, status models.StoryStatus, config json.RawMessage, title string, description string) error {
	ret := _m.Called(ctx, id, status, config, title, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusAndConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.StoryStatus, json.RawMessage, string, string) error); ok {
		r0 = rf(ctx, id, status, config, title, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusAndError provides a mock function with given fields: ctx, id, status, errorDetails
func (_m *StoryConfigRepository) UpdateStatusAndError(ctx context.Context, id uuid.UUID, status models.StoryStatus, errorDetails string) error {
	ret := _m.Called(ctx, id, status, errorDetails)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusAndError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.StoryStatus, string) error); ok {
		r0 = rf(ctx, id, status, errorDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStoryConfigRepository creates a new instance of StoryConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoryConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoryConfigRepository {
	mock := &StoryConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
