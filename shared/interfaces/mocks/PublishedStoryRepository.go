// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"

	uuid "github.com/google/uuid"
)

// PublishedStoryRepository is an autogenerated mock type for the PublishedStoryRepository type
type PublishedStoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, story
func (_m *PublishedStoryRepository) Create(ctx context.Context, story *models.PublishedStory) error {
	ret := _m.Called(ctx, story)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PublishedStory) error); ok {
		r0 = rf(ctx, story)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLikesCount provides a mock function with given fields: ctx, id
func (_m *PublishedStoryRepository) DecrementLikesCount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DecrementLikesCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PublishedStoryRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.PublishedStory, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.PublishedStory, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.PublishedStory); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementLikesCount provides a mock function with given fields: ctx, id
func (_m *PublishedStoryRepository) IncrementLikesCount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementLikesCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListByIDs provides a mock function with given fields: ctx, ids
func (_m *PublishedStoryRepository) ListByIDs(ctx context.Context, ids []uuid.UUID) ([]*models.PublishedStory, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListByIDs")
	}

	var r0 []*models.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*models.PublishedStory, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*models.PublishedStory); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByUserID provides a mock function with given fields: ctx, userID, limit, offset
func (_m *PublishedStoryRepository) ListByUserID(ctx context.Context, userID uuid.UUID, limit int, offset int) ([]*models.PublishedStory, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []*models.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*models.PublishedStory, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*models.PublishedStory); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublic provides a mock function with given fields: ctx, limit, offset
func (_m *PublishedStoryRepository) ListPublic(ctx context.Context, limit int, offset int) ([]*models.PublishedStory, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListPublic")
	}

	var r0 []*models.PublishedStory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.PublishedStory, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.PublishedStory); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PublishedStory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPublic provides a mock function with given fields: ctx, id, userID, isPublic
func (_m *PublishedStoryRepository) SetPublic(ctx context.Context, id uuid.UUID, userID uuid.UUID, isPublic bool) error {
	ret := _m.Called(ctx, id, userID, isPublic)

	if len(ret) == 0 {
		panic("no return value specified for SetPublic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, id, userID, isPublic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusDetails provides a mock function with given fields: ctx, id, status, setup, title, description, errorDetails
func (_m *PublishedStoryRepository) UpdateStatusDetails(ctx context.Context, id uuid.UUID, status models.StoryStatus, setup json.RawMessage, title *string, description *string, errorDetails *string) error {
	ret := _m.Called(ctx, id, status, setup, title, description, errorDetails)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.StoryStatus, json.RawMessage, *string, *string, *string) error); ok {
		r0 = rf(ctx, id, status, setup, title, description, errorDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVisibility provides a mock function with given fields: ctx, storyID, userID, isPublic
func (_m *PublishedStoryRepository) UpdateVisibility(ctx context.Context, storyID uuid.UUID, userID uuid.UUID, isPublic bool) error {
	ret := _m.Called(ctx, storyID, userID, isPublic)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVisibility")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, storyID, userID, isPublic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPublishedStoryRepository creates a new instance of PublishedStoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublishedStoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublishedStoryRepository {
	mock := &PublishedStoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
