// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"
)

// TokenVerifier is an autogenerated mock type for the TokenVerifier type
type TokenVerifier struct {
	mock.Mock
}

// VerifyInterServiceToken provides a mock function with given fields: ctx, tokenString
func (_m *TokenVerifier) VerifyInterServiceToken(ctx context.Context, tokenString string) (*models.Claims, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyInterServiceToken")
	}

	var r0 *models.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Claims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Claims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, tokenString
func (_m *TokenVerifier) VerifyToken(ctx context.Context, tokenString string) (*models.Claims, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *models.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Claims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Claims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenVerifier creates a new instance of TokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenVerifier {
	mock := &TokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
