// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LikeRepository is an autogenerated mock type for the LikeRepository type
type LikeRepository struct {
	mock.Mock
}

// AddLike provides a mock function with given fields: ctx, userID, publishedStoryID
func (_m *LikeRepository) AddLike(ctx context.Context, userID uuid.UUID, publishedStoryID uuid.UUID) error {
	ret := _m.Called(ctx, userID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, publishedStoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckLike provides a mock function with given fields: ctx, userID, publishedStoryID
func (_m *LikeRepository) CheckLike(ctx context.Context, userID uuid.UUID, publishedStoryID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for CheckLike")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID, publishedStoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID, publishedStoryID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, publishedStoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountLikes provides a mock function with given fields: ctx, publishedStoryID
func (_m *LikeRepository) CountLikes(ctx context.Context, publishedStoryID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for CountLikes")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, publishedStoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, publishedStoryID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, publishedStoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLikedStoryIDsByUserID provides a mock function with given fields: ctx, userID, cursor, limit
func (_m *LikeRepository) ListLikedStoryIDsByUserID(ctx context.Context, userID uuid.UUID, cursor string, limit int) ([]uuid.UUID, string, error) {
	ret := _m.Called(ctx, userID, cursor, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListLikedStoryIDsByUserID")
	}

	var r0 []uuid.UUID
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int) ([]uuid.UUID, string, error)); ok {
		return rf(ctx, userID, cursor, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int) []uuid.UUID); ok {
		r0 = rf(ctx, userID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int) string); ok {
		r1 = rf(ctx, userID, cursor, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string, int) error); ok {
		r2 = rf(ctx, userID, cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveLike provides a mock function with given fields: ctx, userID, publishedStoryID
func (_m *LikeRepository) RemoveLike(ctx context.Context, userID uuid.UUID, publishedStoryID uuid.UUID) error {
	ret := _m.Called(ctx, userID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, publishedStoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLikeRepository creates a new instance of LikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeRepository {
	mock := &LikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
