// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"

	uuid "github.com/google/uuid"
)

// PlayerProgressRepository is an autogenerated mock type for the PlayerProgressRepository type
type PlayerProgressRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, progressID
func (_m *PlayerProgressRepository) Delete(ctx context.Context, progressID uuid.UUID) error {
	ret := _m.Called(ctx, progressID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, progressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, progressID
func (_m *PlayerProgressRepository) GetByID(ctx context.Context, progressID uuid.UUID) (*models.PlayerProgress, error) {
	ret := _m.Called(ctx, progressID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.PlayerProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.PlayerProgress, error)); ok {
		return rf(ctx, progressID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.PlayerProgress); ok {
		r0 = rf(ctx, progressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, progressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStoryIDAndHash provides a mock function with given fields: ctx, publishedStoryID, stateHash
func (_m *PlayerProgressRepository) GetByStoryIDAndHash(ctx context.Context, publishedStoryID uuid.UUID, stateHash string) (*models.PlayerProgress, error) {
	ret := _m.Called(ctx, publishedStoryID, stateHash)

	if len(ret) == 0 {
		panic("no return value specified for GetByStoryIDAndHash")
	}

	var r0 *models.PlayerProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*models.PlayerProgress, error)); ok {
		return rf(ctx, publishedStoryID, stateHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *models.PlayerProgress); ok {
		r0 = rf(ctx, publishedStoryID, stateHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, publishedStoryID, stateHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserIDAndStoryID provides a mock function with given fields: ctx, userID, publishedStoryID
func (_m *PlayerProgressRepository) GetByUserIDAndStoryID(ctx context.Context, userID uuid.UUID, publishedStoryID uuid.UUID) (*models.PlayerProgress, error) {
	ret := _m.Called(ctx, userID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDAndStoryID")
	}

	var r0 *models.PlayerProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.PlayerProgress, error)); ok {
		return rf(ctx, userID, publishedStoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.PlayerProgress); ok {
		r0 = rf(ctx, userID, publishedStoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, publishedStoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, progress
func (_m *PlayerProgressRepository) Save(ctx context.Context, progress *models.PlayerProgress) (uuid.UUID, error) {
	ret := _m.Called(ctx, progress)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PlayerProgress) (uuid.UUID, error)); ok {
		return rf(ctx, progress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PlayerProgress) uuid.UUID); ok {
		r0 = rf(ctx, progress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PlayerProgress) error); ok {
		r1 = rf(ctx, progress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlayerProgressRepository creates a new instance of PlayerProgressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayerProgressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlayerProgressRepository {
	mock := &PlayerProgressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
