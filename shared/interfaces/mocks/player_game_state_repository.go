// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"

	uuid "github.com/google/uuid"
)

// PlayerGameStateRepository is an autogenerated mock type for the PlayerGameStateRepository type
type PlayerGameStateRepository struct {
	mock.Mock
}

// CheckGameStateExistsForStories provides a mock function with given fields: ctx, playerID, storyIDs
func (_m *PlayerGameStateRepository) CheckGameStateExistsForStories(ctx context.Context, playerID uuid.UUID, storyIDs []uuid.UUID) (map[uuid.UUID]bool, error) {
	ret := _m.Called(ctx, playerID, storyIDs)

	if len(ret) == 0 {
		panic("no return value specified for CheckGameStateExistsForStories")
	}

	var r0 map[uuid.UUID]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (map[uuid.UUID]bool, error)); ok {
		return rf(ctx, playerID, storyIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) map[uuid.UUID]bool); ok {
		r0 = rf(ctx, playerID, storyIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, playerID, storyIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByPlayerAndStory provides a mock function with given fields: ctx, playerID, publishedStoryID
func (_m *PlayerGameStateRepository) DeleteByPlayerAndStory(ctx context.Context, playerID uuid.UUID, publishedStoryID uuid.UUID) error {
	ret := _m.Called(ctx, playerID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByPlayerAndStory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, playerID, publishedStoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, gameStateID
func (_m *PlayerGameStateRepository) GetByID(ctx context.Context, gameStateID uuid.UUID) (*models.PlayerGameState, error) {
	ret := _m.Called(ctx, gameStateID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.PlayerGameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.PlayerGameState, error)); ok {
		return rf(ctx, gameStateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.PlayerGameState); ok {
		r0 = rf(ctx, gameStateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerGameState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, gameStateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPlayerAndStory provides a mock function with given fields: ctx, playerID, publishedStoryID
func (_m *PlayerGameStateRepository) GetByPlayerAndStory(ctx context.Context, playerID uuid.UUID, publishedStoryID uuid.UUID) (*models.PlayerGameState, error) {
	ret := _m.Called(ctx, playerID, publishedStoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPlayerAndStory")
	}

	var r0 *models.PlayerGameState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.PlayerGameState, error)); ok {
		return rf(ctx, playerID, publishedStoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.PlayerGameState); ok {
		r0 = rf(ctx, playerID, publishedStoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlayerGameState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, playerID, publishedStoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, state
func (_m *PlayerGameStateRepository) Save(ctx context.Context, state *models.PlayerGameState) (uuid.UUID, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PlayerGameState) (uuid.UUID, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PlayerGameState) uuid.UUID); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PlayerGameState) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPlayerGameStateRepository creates a new instance of PlayerGameStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayerGameStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlayerGameStateRepository {
	mock := &PlayerGameStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
