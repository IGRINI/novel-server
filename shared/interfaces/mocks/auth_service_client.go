// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	interfaces "novel-server/shared/interfaces"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

// GetUsersInfo provides a mock function with given fields: ctx, userIDs
func (_m *AuthServiceClient) GetUsersInfo(ctx context.Context, userIDs []uuid.UUID) (map[uuid.UUID]interfaces.UserInfo, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersInfo")
	}

	var r0 map[uuid.UUID]interfaces.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) (map[uuid.UUID]interfaces.UserInfo, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) map[uuid.UUID]interfaces.UserInfo); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]interfaces.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthServiceClient creates a new instance of AuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceClient {
	mock := &AuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
