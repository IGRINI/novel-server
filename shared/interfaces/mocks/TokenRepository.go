// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "novel-server/shared/models"

	uuid "github.com/google/uuid"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

// DeleteRefreshUUID provides a mock function with given fields: ctx, refreshUUID
func (_m *TokenRepository) DeleteRefreshUUID(ctx context.Context, refreshUUID string) error {
	ret := _m.Called(ctx, refreshUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshUUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokens provides a mock function with given fields: ctx, accessUUID, refreshUUID
func (_m *TokenRepository) DeleteTokens(ctx context.Context, accessUUID string, refreshUUID string) (int64, error) {
	ret := _m.Called(ctx, accessUUID, refreshUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokens")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, error)); ok {
		return rf(ctx, accessUUID, refreshUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, accessUUID, refreshUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accessUUID, refreshUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTokensByUserID provides a mock function with given fields: ctx, userID
func (_m *TokenRepository) DeleteTokensByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokensByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDByAccessUUID provides a mock function with given fields: ctx, accessUUID
func (_m *TokenRepository) GetUserIDByAccessUUID(ctx context.Context, accessUUID string) (uuid.UUID, error) {
	ret := _m.Called(ctx, accessUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByAccessUUID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, accessUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, accessUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDByRefreshUUID provides a mock function with given fields: ctx, refreshUUID
func (_m *TokenRepository) GetUserIDByRefreshUUID(ctx context.Context, refreshUUID string) (uuid.UUID, error) {
	ret := _m.Called(ctx, refreshUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIDByRefreshUUID")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, error)); ok {
		return rf(ctx, refreshUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, refreshUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetToken provides a mock function with given fields: ctx, userID, td
func (_m *TokenRepository) SetToken(ctx context.Context, userID uuid.UUID, td *models.TokenDetails) error {
	ret := _m.Called(ctx, userID, td)

	if len(ret) == 0 {
		panic("no return value specified for SetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.TokenDetails) error); ok {
		r0 = rf(ctx, userID, td)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
