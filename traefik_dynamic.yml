# traefik_dynamic.yml
http:
  # ============================================
  # Middlewares
  # ============================================
  middlewares:
    # --- Strip Prefixes ---
    auth-stripprefix:
      stripPrefix:
        prefixes:
          - "/api"

    # Убирает /admin перед отправкой запроса в admin-service (для защищенных путей)
    admin-protected-stripprefix:
      stripPrefix:
        prefixes:
          - "/admin"

    # <<< НОВЫЕ MIDDLEWARE ДЛЯ V1 >>>
    auth-v1-stripprefix:
      stripPrefix:
        prefixes:
          - "/api/v1" # Убираем /api/v1 для auth-service

    gameplay-v1-stripprefix:
      stripPrefix:
        prefixes:
          - "/api/v1" # Убираем /api/v1 для gameplay-service

  # ============================================
  # Routers
  # ============================================
  routers:
    # --- Landing Page Router (Lowest priority catch-all for non-API routes) ---
    landing-page-router:
      entryPoints:
        - "web"
      # Matches paths NOT starting with known API/service prefixes
      rule: "!PathPrefix(`/api`, `/admin`, `/login`, `/ws`, `/auth`)"
      service: "landing-page-service"
      priority: 1 # Low priority ensures API routes match first

    # --- Auth Service (Router for /auth/* AND /api/v1/*) ---
    auth-router:
      entryPoints:
        - "web"
      # <<< UPDATED RULE to match both prefixes >>>
      rule: "PathPrefix(`/auth`) || PathPrefix(`/api/v1`)"
      service: "auth-service"
      middlewares:
        # <<< Apply middleware only if path is /api/v1? Or handle in service? >>>
        # For now, keep it simple. The middleware only strips /api/v1, so it's okay.
        - "auth-v1-stripprefix"
      priority: 10

    # --- Gameplay Service ---
    gameplay-http-router:
      entryPoints:
        - "web"
      # <<< ИЗМЕНЕНО: Правила теперь для /api/v1/... >>>
      rule: "(PathPrefix(`/api/v1/stories`) || PathPrefix(`/api/v1/published-stories`) || PathPrefix(`/api/v1/gamestates`))"
      service: "gameplay-service"
      middlewares:
       - "gameplay-v1-stripprefix" # <<< ИЗМЕНЕНО: Используем новый middleware
      priority: 11 # Higher priority for API routes

    # --- Admin Service (Login Page) ---
    admin-login-router:
      entryPoints:
        - "web"
      # Matches exact path
      rule: "Path(`/login`)"
      service: "admin-service"
      priority: 11 # Higher priority for exact path

    # --- Admin Service (Protected Routes) ---
    admin-protected-router:
      entryPoints:
        - "web"
      # Matches path prefix
      rule: "PathPrefix(`/admin`)"
      service: "admin-service"
      middlewares:
        - "admin-protected-stripprefix"
      priority: 10 # Higher priority for API routes

    # --- Websocket Service ---
    websocket-router:
      entryPoints:
        - "web"
      # Matches exact path
      rule: "Path(`/ws`)"
      service: "websocket-service"
      priority: 11 # Higher priority for exact path

    # <<< ДОБАВЛЕНО: Роутер для Image Server >>>
    image-server-router:
      entryPoints:
        - "web"
      rule: "PathPrefix(`/generated-images`)" # Маршрут для статики
      service: "image-server-service"
      priority: 10 # Приоритет как у других сервисов API

  # ============================================
  # Services (Load Balancers)
  # ============================================
  services:
    # --- Landing Page Service ---
    landing-page-service:
      loadBalancer:
        servers:
          - url: "http://landing-page:80" # Nginx listens on port 80

    # --- Auth Service ---
    auth-service:
      loadBalancer:
        servers:
          - url: "http://auth-service:8081"

    # --- Gameplay Service ---
    gameplay-service:
      loadBalancer:
        servers:
          - url: "http://gameplay-service:8082"

    # --- Admin Service ---
    admin-service:
      loadBalancer:
        servers:
          - url: "http://admin-service:8084"

    # --- Websocket Service ---
    websocket-service:
      loadBalancer:
        servers:
          - url: "http://websocket-service:8083"

    # <<< ДОБАВЛЕНО: Сервис для Image Server (Nginx) >>>
    image-server-service:
      loadBalancer:
        servers:
          - url: "http://image-server:80" # Nginx внутри контейнера слушает порт 80